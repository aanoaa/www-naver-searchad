#!/usr/bin/env perl
use strict;
use warnings;

use Directory::Queue;
use FindBin qw($Bin);
use Parallel::ForkManager;
use Path::Tiny;
use Redis;
use SearchAd::Schema;
use WWW::Naver::SearchAd::Rank qw/enqueue $RANK_OK/;

STDOUT->autoflush(1);

our $REDIS_KEY_SEARCHAD_SOCKS = 'searchad:socks';
our $MAX_PROCESS = $ENV{SEARCHAD_MAX_PROC} || 5;

my $config  = require "$Bin/../searchad.conf";
my $db_conf = $config->{database};
my $schema  = SearchAd::Schema->connect(
    {
        dsn      => $db_conf->{dsn},
        user     => $db_conf->{user},
        password => $db_conf->{pass},
        %{ $db_conf->{opts} },
    }
);

my @socks = path("$Bin/../socks.list")->lines( { chomp => 1 } );
@socks = grep { /^[^#]/ } @socks;

my $redis = Redis->new;
$redis->del($REDIS_KEY_SEARCHAD_SOCKS);
$redis->rpush( $REDIS_KEY_SEARCHAD_SOCKS, @socks );

my $max_proc = scalar @socks;
$max_proc = $MAX_PROCESS if $max_proc > $MAX_PROCESS;

my $pm = Parallel::ForkManager->new($max_proc);
my $dirq = Directory::Queue->new( path => '/tmp/searchad' );

while (1) {
    my @ranks = $schema->resultset('Rank')->search( { on_off => 1 } );

    LOOPS:
    for my $r (@ranks) {
        $pm->start and next LOOPS;
        srand();
        my $rand = int( rand(10) ) + 20;
        sleep( $rand++ );

        while (1) {
            my $socks = $redis->lpop('searchad:socks');
            unless ($socks) {
                sleep(1);
                next;
            }

            my $success = enqueue( $dirq, $r, $socks );
            if ($success) {
                $redis->rpush( 'searchad:socks', $socks );
                if ( $success == $RANK_OK ) {
                    my $adkeyword = $r->adkeyword;
                    $schema->resultset('Bidlog')->create(
                        {
                            adkeyword_id => $adkeyword->id,
                            before_amt   => $r->bid_amt,
                            after_amt    => $r->bid_amt,
                            rank         => $r->rank,
                            tobe         => $r->tobe,
                        }
                    );
                }
            }
            $pm->finish;
            last;
        }
    }
}
